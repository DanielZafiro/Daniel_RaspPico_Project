parseInt(string,radix)\nThe parseInt() \nThis function parses a string and returns an integer.\nThe radix parameter is used to specify which numeral system to be used, for example,\na radix of 16 (hexadecimal) indicates that the number in the string should be parsed from a hexadecimal number to a decimal number.\nIf the radix parameter is omitted, JavaScript assumes the following:\n\nIf the string begins with "0x", the radix is 16 (hexadecimal)\nIf the string begins with "0", the radix is 8 (octal). This feature is deprecated\nIf the string begins with any other value, the radix is 10 (decimal)
eval(string)\nThe eval() \nThis function evaluates or executes an argument.\nIf the argument is an expression, eval() evaluates the expression. If the argument is one or more JavaScript statements, eval() executes the statements.
parseFloat(string)\nThe parseFloat() \nThis function parses a string and returns a floating point number.\nThis function determines if the first character in the specified string is a number. If it is, it parses the string until it reaches the end of the number, and returns the number as a number, not as a string.\nNote: Only the first number in the string is returned!\nLeading and trailing spaces are allowed.\nIf the first character cannot be converted to a number, parseFloat() returns NaN.	
isNaN(value)\nThe isNaN() \nThis function determines whether a value is an illegal number (Not-a-Number).\nThis function returns true if the value is NaN, and false if not.
isFinite(value)\nThe isFinite() \nThis function determines whether a number is a finite, legal number.\nThis function returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.
decodeURI(uri)\nThe decodeURI() \nThis function is used to decode a URI.
decodeURIComponent(uri)\nThe decodeURIComponent() \nThis function decodes a URI component.
encodeURI(uri)\nThe encodeURI() \nThis function is used to encode a URI.\nThis function encodes special characters, except: , / ? : @ & = + $ # (Use encodeURIComponent() to encode these characters).
encodeURIComponent(uri)\nThe encodeURIComponent() \nThis function encodes a URI component.\nThis function encodes special characters. In addition, it encodes the following characters: , / ? : @ & = + $ #
JSON::parse(text [, reveiver]) \nParses a string as JSON, optionally transforming the value produced by parsing.
JSON::stringify(value [, replacer [, space]]) \nConverts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified,\nor optionally including only the specified properties if a replacer array is specified.
Math::E \nThis property represents the base of natural logarithms, e, approximately 2.718.
Math::LN10 \nThis property represents the natural logarithm of 10, approximately 2.302.
Math::LN2 \nThis property represents the natural logarithm of 2, approximately 0.693.
Math::LOG2E \nThis property represents the base 2 logarithm of e, approximately 1.442.
Math::LOG10E \nThis property represents the base 10 logarithm of e, approximately 0.434.
Math::PI \nThis property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159.
Math::SQRT1_2 \nThis property represents the square root of 1/2 which is approximately 0.707.
Math::SQRT2 \nThis property represents the square root of 2, approximately 1.414.
Math::abs(x) \nReturns the absolute value of a number.
Math::acos(x) \nReturns the arccosine (in radians) of a number.
Math::asin(x) \nReturns the arcsine (in radians) of a number.
Math::atan(x) \nReturns the arctangent (in radians) of a number.
Math::atan2(y, x) \nReturns the arctangent of the quotient of its arguments.
Math::ceil(x) \nReturns the smallest integer greater than or equal to a given number.
Math::cos(x) \nReturns the cosine of a number.
Math::exp(x) \nReturns e^x, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms.
Math::floor(x) \nReturns the largest integer less than or equal to a given number.
Math::log(x) \nReturns the natural logarithm (base e) of a number.
Math::max([value1 [, value2 [, ...]]]) \nReturns the largest of zero or more numbers.
Math::min([value1 [, value2 [, ...]]]) \nReturns the smallest of zero or more numbers.
Math::pow(x, y) \nReturns the base to the exponent power, that is, base^exponent.
Math::random() \nReturns a floating-point, pseudo-random number in the range [0, 1) that is, from 0 (inclusive) up to but not including 1 (exclusive),\nwhich you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm;\nit cannot be chosen or reset by the user.
Math::round(x) \Returns the value of a number rounded to the nearest integer.
Math::sin(x) \nReturns the sine of a number.
Math::sqrt(x) \nReturns the square root of a number.
Math::tan(x) \nReturns the tangent of a number.
