ScriptCanvas2DWidget::globalAlpha \nThis read-write property [qreal] holds the current alpha value applied to rendering operations. The value must be in the range from 0.0 [fully transparent] to 1.0 [fully opaque]. The default value is 1.0.
ScriptCanvas2DWidget::globalCompositeOperation \nThis read-write property [String] holds the current composition operation. The default value is source-over. Following values are possible: "source-over", "destination-over", "clear", "source", "destination", "source-in", "destination-in", "source-out", "destination-out", "source-atop", "destination-atop", "xor", "plus", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion". See QPainter:CompositionMode for more details.
ScriptCanvas2DWidget::strokeStyle \nThis read-write property [QVariant] holds the current color or style to use for the lines around shapes. The style can be either a string containing a CSS color, a CanvasGradient or CanvasPattern object. Invalid values are ignored. The default value is '#000000'.
ScriptCanvas2DWidget::fillStyle \nThis read-write property [QVariant] holds the current style used for filling shapes. The style can be either a string containing a CSS color, a CanvasGradient or CanvasPattern object. The default value is '#000000'.
ScriptCanvas2DWidget::lineWidth \nThis read-write property [qreal] holds the current line width. Values that are not finite values greater than zero are ignored. The default value is 1.
ScriptCanvas2DWidget::lineCap \nThis read-write property [String] holds the current line cap style. The possible line cap styles are: 'butt', 'round' and 'square'.
ScriptCanvas2DWidget::lineJoin \nThis read-write property [String] holds the current line join style. A join exists at any point in a subpath shared by two consecutive lines. When a subpath is closed, then a join also exists at its first point [equivalent to its last point] connecting the first and last lines in the subpath.The possible line join styles are: 'bevel', 'round', 'miter'.
ScriptCanvas2DWidget::miterLimit \nThis read-write property [qreal] holds the current miter limit ratio. The default miter limit value is 10.0.
ScriptCanvas2DWidget::shadowOffsetX \nThis read-write property [qreal] holds the current shadow offset in the positive horizontal distance. The default value is 0.
ScriptCanvas2DWidget::shadowOffsetY \nThis read-write property [qreal] holds the current shadow offset in the positive vertical distance. The default value is 0.
ScriptCanvas2DWidget::shadowBlur \nThis read-write property [qreal] holds the current level of blur applied to shadows. The default value is 0.
ScriptCanvas2DWidget::shadowColor \nThis read-write property [String] holds the current shadow color. The default value is '#000000'.
ScriptCanvas2DWidget::width \nThis read-property [int] holds the width of the canvas widget.
ScriptCanvas2DWidget::height \nThis read-property [int] holds the height of the canvas widget.
ScriptCanvas2DWidget::save(void):void \nPushes the current state onto the state stack.\nBefore changing any state attributes, you should save the current state for future reference. \nThe context maintains a stack of drawing states. Each state consists of the current transformation\nmatrix, clipping region, and values of the following attributes:\nstrokeStyle\nfillStyle\nglobalAlpha\nlineWidth\nlineCap\nlineJoin\nmiterLimit\nshadowOffsetX\nshadowOffsetY\nshadowBlur\nshadowColor\nglobalCompositeOperation
ScriptCanvas2DWidget::restore(void):void \nPops the top state on the stack, restoring the context to that state.
ScriptCanvas2DWidget::scale(qreal x, qreal y):void \nIncreases or decreases the size of each unit in the canvas grid by multiplying\nthe scale factors to the current tranform matrix. x is the scale factor in the\nhorizontal direction and y is the scale factor in the vertical direction.
ScriptCanvas2DWidget::rotate(qreal angle):void \nRotate the canvas around the current origin by angle in radians and clockwise direction.
ScriptCanvas2DWidget::translate(qreal x, qreal y):void \nTranslates the origin of the canvas by a horizontal distance of x, and a vertical distance of y,\nin coordinate space units.\nTranslating the origin enables you to draw patterns of different objects on the canvas without\nhaving to measure the coordinates manually for each shape.
ScriptCanvas2DWidget::transform(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy):void \nThis method is very similar to setTransform(), but instead of replacing the old transform matrix,\nthis method applies the given tranform matrix to the current matrix by multiplying to it.
ScriptCanvas2DWidget::setTransform(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy):void \nChanges the transformation matrix to the matrix given by the arguments as described below.\nModifying the transformation matrix directly enables you to perform scaling, rotating,\nand translating transformations in a single step.\nEach point on the canvas is multiplied by the matrix before anything is drawn.\nFor more details see the HTML Canvas 2D Context specification.
ScriptCanvas2DWidget::createLinearGradient(qreal x0, qreal y0, qreal x1, qreal y1):CanvasGradient \nReturns a CanvasGradient object that represents a linear gradient that transitions the color along a\nline between the start point (x0, y0) and the end point (x1, y1).\nA gradient is a smooth transition between colors. There are two types of gradients: linear and radial.\nGradients must have two or more color stops, representing color shifts positioned from 0 to 1 between\nto the gradient's starting and end points or circles.
ScriptCanvas2DWidget::createRadialGradient(qreal x0, qreal y0, qreal r0, qreal x1, qreal y1, qreal r1):CanvasGradient \nReturns a CanvasGradient object that represents a radial gradient that paints along the cone given by\nthe start circle with origin (x0, y0) and radius r0, and the end circle with origin (x1, y1) and radius r1.
ScriptCanvas2DWidget::clearRect(qreal x, qreal y, qreal w, qreal h):void \nClears all pixels on the canvas in the given rectangle to transparent black.
ScriptCanvas2DWidget::fillRect(qreal x, qreal y, qreal w, qreal h):void \nPaint the specified rectangular area using the fillStyle.
ScriptCanvas2DWidget::strokeRect(qreal x, qreal y, qreal w, qreal h):void \nStroke the specified rectangle's path using the strokeStyle, lineWidth,\nlineJoin, and (if appropriate) miterLimit attributes.
ScriptCanvas2DWidget::beginPath(void):void \nResets the current path to a new path.
ScriptCanvas2DWidget::closePath(void):void \nCloses the current subpath by drawing a line to the beginning of the subpath, automatically starting a\nnew path. The current point of the new path is the previous subpath's first point.
ScriptCanvas2DWidget::moveTo(qreal x, qreal y):void \nCreates a new subpath with the given point.
ScriptCanvas2DWidget::lineTo(qreal x, qreal y):void \nDraws a line from the current position to the point (x, y).
ScriptCanvas2DWidget::quadraticCurveTo(qreal cpx, qreal cpy, qreal x, qreal y):void \nAdds a quadratic bezier curve between the current point and the endpoint (x, y) with the control point specified by (cpx, cpy).
ScriptCanvas2DWidget::bezierCurveTo(qreal cp1x, qreal cp1y, qreal cp2x, qreal cp2y, qreal x, qreal y):void \nAdds a cubic bezier curve between the current position and the given endPoint using the control points specified by (cp1x, cp1y)\nand (cp2x, cp2y). After the curve is added, the current position is updated to be at the end point (x, y) of the curve.
ScriptCanvas2DWidget::arcTo(qreal x1, qreal y1, qreal x2, qreal y2, qreal radius):void \nAdds an arc with the given control points and radius to the current subpath, connected to the previous point by a straight line.
ScriptCanvas2DWidget::rect(qreal x, qreal y, qreal w, qreal h):void \nAdds a rectangle at position (x, y), with the given width w and height h, as a closed subpath.
ScriptCanvas2DWidget::arc(qreal x, qreal y, qreal radius, qreal startAngle, qreal endAngle, bool anticlockwise):void \nAdds an arc to the current subpath that lies on the circumference of the circle whose center is at the point (x, y) and whose radius is radius.\nBoth startAngle and endAngle are measured from the x-axis in radians.\nThe anticlockwise parameter is true for each arc in the figure above because they are all drawn in the anticlockwise direction.
ScriptCanvas2DWidget::fill(void):void \nFills the subpaths with the current fill style.
ScriptCanvas2DWidget::stroke(void):void \nStrokes the subpaths with the current stroke style.
ScriptCanvas2DWidget::clip(void):void \nCreates the clipping region from the current path. Any parts of the shape outside the clipping path are not displayed.
ScriptCanvas2DWidget::isPointInPath(qreal x, qreal y):bool \nReturns true if the given point is in the current path.
ScriptCanvas2DWidget::clear(void):void \nClears the canvas widget.
ScriptCanvas2DWidget::reset(void):void \nResets the canvas widget.
ScriptCanvas2DWidget::width(void):int \nReturns the width of the canvas widget.
ScriptCanvas2DWidget::height(void):int \nReturns the height of the canvas widget.
ScriptCanvas2DWidget::saveToFile(String fileName, String imageType=""):bool \nSave the canvas widget to an image file.
ScriptCanvas2DWidget::print(String printDialogTitle=""):void \nOpens a print dialog and prints the canvas widget.
ScriptCanvas2DWidget::mousePressSignal.connect(int xValue, int yValue, quint32 mouseButton) \nIs emitted if the user press a mouse button inside the widget.\nNote: mouseButton has the type Qt::MouseButton.
ScriptCanvas2DWidget::mouseReleasSignal.connect(int xValue, int yValue, quint32 mouseButton) \nIs emitted if the user releases a mouse button inside the widget.\nNote: mouseButton has the type Qt::MouseButton.
ScriptCanvas2DWidget::mouseMoveSignal.connect(int xValue, int yValue) \nIs emitted if the user moves the mouse inside the widget.
ScriptCanvas2DWidget::keyPressSignal.connect(String keyText, int keyCode, quint32 modifiers) \nIs emitted if the user press a key inside the widget.\nNote:\nmodifiers has the type Qt::KeyboardModifiers.\nkeyCode has the type Qt::Key
ScriptCanvas2DWidget::keyReleaseSignal.connect(String key, int keyCode, quint32 modifiers) \nIs emitted if the user releases a key inside the widget.\nNote:\nmodifiers has the type Qt::KeyboardModifiers\nkeyCode has the type Qt::Key.